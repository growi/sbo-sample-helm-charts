# tag::db-deployment[]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
  annotations:
    # tag::db-annotations[]
    service.binding/type: "postgresql"
    service.binding/host: "path={.metadata.name}.{.metadata.namespace}"
    service.binding/port: "path={.spec.template.spec.containers[0].ports[0].containerPort}"
    service.binding: "path={.spec.template.spec.volumes[0].secret.secretName},objectType=Secret"
    # end::db-annotations[]
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgresql.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: postgresql
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          env:
            - name: POSTGRES_DB_FILE
              value: /secrets/database
            - name: POSTGRES_PASSWORD_FILE
              value: /secrets/password
            - name: POSTGRES_USER_FILE
              value: /secrets/username
            - name: PGDATA
              value: /tmp/data
          volumeMounts:
            - name: {{ include "postgresql.fullname" . }}-vol
              mountPath: "/secrets"
              readOnly: true
          ports:
            - name: postgresql
              containerPort: 5432
      volumes:
        - name: {{ include "postgresql.fullname" . }}-vol
          secret:
            secretName: {{ include "postgresql.fullname" . }}-secret
# end::db-deployment[]